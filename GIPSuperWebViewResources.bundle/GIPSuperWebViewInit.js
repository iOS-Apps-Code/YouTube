// Copyright 2009 Google Inc. All Rights Reserved.

/**
 * @fileoverview Injecting stubs for Speech and Media Picker APIs.
 */
(function() {
  if (navigator && !navigator.googleInternal) {
    if (typeof navigator.speech == 'undefined') {
      var speechApiStub = {};
      speechApiStub.init = function() {
        navigator.googleInternal.dispatch('speech', 'init');
      };
      navigator.speech = speechApiStub;
    }
    if (typeof navigator.googleMediaPicker == 'undefined') {
      var mediaPickerStub = {};
      mediaPickerStub.init = function() {
        navigator.googleInternal.dispatch('mediapicker', 'init');
      };
      navigator.googleMediaPicker = mediaPickerStub;
    }
    if (typeof navigator.googleRpc == 'undefined') {
      var rpcStub = {};
      rpcStub.init = function() {
        navigator.googleInternal.dispatch('rpc', 'init');
      };
      navigator.googleRpc = rpcStub;
    }
    navigator.googleInternal = {
      iframe_: undefined,
      isInitialized: false,
      init: function() {
        if (this.isInitialized) {
          return;
        }
        this.iframe_ = document.createElement('iframe');
        var cssText = 'position:absolute;top:-5000px;height:2px;width:2px;';
        this.iframe_.style.cssText = cssText;
        this.iframe_.src = 'about:blank';
        document.body.appendChild(this.iframe_);
        this.isInitialized = true;
      },
      dispatch: function(object, method, opt_args) {
        var urlWithoutHash = window.location.href.split('#')[0];
        var requestUrl = urlWithoutHash +
            '#googleapp/api/' + object + '/' + method +
            (opt_args ? '/?' + this.serialize_(opt_args) : '');

        var oldHash = window.location.hash;
        var newHash = 'googleapp/api/' + object + '/' + method +
            (opt_args ? '/?' + this.serialize_(opt_args) : '');

        this.init();
        this.iframe_.contentWindow.location.hash = newHash;
        // Setting the hash to an empty string will cause the page to jump to
        // the top of the iframe, which is the top of the window. We instead set
        // it to a dummy value to prevent any jumping form occuring.
        this.iframe_.contentWindow.location.hash = 'null';
      },
      /**
       * Returns a string representation of the passed in object.
       * @param {!Object} args An object to serialize to a string. The keys and
       *     values must all be primitive types and not nested objects / arrays.
       * @return {string} A string representation of the passed in object.
       * @private
       */
      serialize_: function(args) {
        var ret = '';
        for (var i in args) {
          if (args[i] == null || args[i] == undefined) {
            ret += encodeURIComponent(i) + '&';
          } else {
            ret += encodeURIComponent(i) + '=' +
                encodeURIComponent(args[i]) + '&';
          }
        }
        return ret.substring(0, ret.length - 1);
      },
      /**
       * Returns an object representation of the passed in string. It is
       * expected that this function be used in conjunction with the serialize_
       * function above.
       * @param {string} kvString A string generated by the serialize_ method.
       * @return {!Object} An object representation of the passed in string.
       * @private
       */
      deserialize_: function(kvString) {
        var ret = {};
        var keyValues = kvString.split('&');
        for (var i = 0, l = keyValues.length; i < l; ++i) {
          var kvSplit = keyValues[i].split('=');
          if (kvSplit.length > 1) {
            ret[decodeURIComponent(kvSplit[0])] =
                decodeURIComponent(kvSplit[1]);
          } else {
            ret[decodeURIComponent(keyValues[i])] = null;
          }
        }
        return ret;
      }
    };

    // The init function requires access to document.body, which is not ready
    // until the load event fires.
    window.addEventListener('load', function() {
      navigator.googleInternal.init();
    }, false);
  }
})();
